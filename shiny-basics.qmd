---
title: "Shiny Basics"
format: html
editor_options: 
  chunk_output_type: console
---

# Welcome to Shiny

## Installation

Shiny is an R package that makes it easy to build interactive web applications.

```{r}
install.packages("shiny")
```

## Example Shiny Apps

The Shiny package comes with 11 built in examples to demonstrate have the package works.

```{r}
library(shiny)
runExample("01_hello")
```

## Structure of a Shiny App

Shiny apps are contained in a single script called `app.R`. The script lives in a directory (for example, `newdir/`) and the ap can be run with `runApp("newdir")`.

`app.R` has three components:

-   The user interface object, `ui`, controls the layout and appearance of the app.
-   The server function, `server`, contains the instructions that the computer needs to build the app.
-   The `shinyApp` function creates Shiny app objects from an explicit UI/server pair.

### ui

Here is the `ui` object from the example above:

```{r}
library(shiny)
library(bslib)

# Define UI for app that draws a histogram
ui = page_sidebar(
  # App title
  title = "Hello Shiny!",
  # Sidebar panel for inputs
  sidebar = sidebar(
    # Input: Slider for the number of bins
    sliderInput(
      inputId = "bins",
      label = "Number of bins:",
      min = 1,
      max = 50,
      value = 30
    )
  ),
  # Output: Histogram
  plotOutput(outputId = "distPlot")
)

```

Here is the `server` function from the example above:

```{r}
# Define server logic required to draw a histogram
server = function(input, output) {
  
  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when inputs (input$bins) change
  # 2. Its output type is a plot
  output$distPlot = renderPlot({
    
    x = faithful$waiting
    bins = seq(min(x), max(x), length.out = input$bins + 1)
    
    hist(x, breaks = bins, col = "#007BC2", border = "white",
         xlab = "Waiting time to next eruption (in mins)",
         main = "Histogram of waiting times")
  })
}
```

At one level, the `server` function is very simple. However, notice that most of the script is wrapped in a call to `renderPlot`. This concept will be explained later.

Here is the `app.R` function from the example above:

```{r}
library(shiny)

ui = ... # example from above
server = ... # example from above

shinyApp(ui = ui, server = server)
```

The R session will be busy while the app is running so you will have to exit before running anymore commands.

## Running an App

